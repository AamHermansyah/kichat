// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  conversations          UserConversation[]
  seenMessages           UserSeenMessage[]
  accounts               Account[]
  messages               Message[]
  sentFriendRequests     FriendRequest[]    @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[]    @relation("ReceivedFriendRequests")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  messages Message[]
  users    UserConversation[]
}

model Message {
  id             String   @id @default(uuid())
  body           String?
  image          String?
  createdAt      DateTime @default(now())
  conversationId String
  senderId       String

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation(fields: [senderId], references: [id])

  seenMessages UserSeenMessage[]
}

model UserConversation {
  userId         String
  conversationId String

  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@id([userId, conversationId])
}

model UserSeenMessage {
  userId    String
  messageId String

  user    User    @relation(fields: [userId], references: [id])
  message Message @relation(fields: [messageId], references: [id])

  @@id([userId, messageId])
}

model FriendRequest {
  id         String              @id @default(uuid())
  createdAt  DateTime            @default(now())
  senderId   String
  receiverId String
  status     FriendRequestStatus @default(PENDING)

  sender   User @relation("SentFriendRequests", fields: [senderId], references: [id])
  receiver User @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}
